"""
容器类型的公共运算符解释:
    概述:
        至此, 5种容器类型我们已经初步了解了, 例如:  字符串str, 列表list, 元组tuple, 字典dict, 集合set.
        那么我们接触过的 运算符 或者 函数 有没有哪些是可以作用到它们所有容器类型呢? 我们简单总结一下.
    公共的运算符:
        +           表示: 合并(拼接), 可以作用于: 字符串, 列表, 元组
        *           表示: 复制, 可以作用于: 字符串, 列表, 元组
        in          表示: 是否在, 可以作用于: 字符串, 列表, 元组, 字典, 集合
        not in      表示: 是否不在, 可以作用于: 字符串, 列表, 元组, 字典, 集合
"""

# 演示 +           表示: 合并(拼接), 可以作用于: 字符串, 列表, 元组
print('aa' + 'bb')
print([1, 2, 3] + [4, 5, 6] + ['a', 'b'])
print((1, 2, 3) + ('a', 'b'))
# print({1, 2, 3} + {'a', 'b'})             # +不支持集合, 因为集合元素具有 唯一性. 合并可能存在重复元素, 然后会自动删除重复的, 无意义.
# print({'name': '张三', 'age': 23} + {'name': '李四', 'address':'北京'})     # +不支持字典, 键具有唯一性.

# 演示 *           表示: 复制, 可以作用于: 字符串, 列表, 元组
print('-' * 28)
print([1, 2, 3] * 2)
print((1, 2, 3) * 2)
# print({1, 2, 3} * 2)    # *不能作用于集合, 集合元素具有唯一性.
# print({'name': '张三', 'age': 23} * 2)    # *不能作用于字典, 键具有唯一性
print('-' * 28)

# 演示 in          表示: 是否在, 可以作用于: 字符串, 列表, 元组, 字典
print('a' in 'abc')
print(10 in [10, 20, 30])
print(10 in (10, 20, 30))
print(10 in {10, 20, 30})
print('name' in {'name': '张三', 'age': 23})  # 字典只能判断是否包含这个键.
print(23 in {'name': '张三', 'age': 23})      # 字典只能判断是否包含这个键.
print('-' * 28)

# 演示 not in      表示: 是否不在, 可以作用于: 字符串, 列表, 元组, 字典
print('a' not in 'abc')
print(10 not in [10, 20, 30])
print(10 not in (10, 20, 30))
print(10 not in {10, 20, 30})
print('name' not in {'name': '张三', 'age': 23})  # 字典只能判断是否包含这个键.
print(23 not in {'name': '张三', 'age': 23})      # 字典只能判断是否包含这个键.
