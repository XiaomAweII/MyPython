"""
闭包 解释:
    概述:
        使用了 外部函数变量的 内部函数, 称之为: 闭包.
    回顾: 局部变量的生命周期
        局部变量随着函数的调用而存在, 随着函数调用完毕而消失, 即: 函数执行结束后, 变量就释放了.
    作用:
        可以保存外部函数的变量值, 即: 外部函数执行结束后, 它的变量也是可以在 内部函数中 继续使用的.
    格式:
        def 外部函数名(形参列表):
            可以在这里定义 外部函数的 局部变量.

            def 内部函数名(形参列表):                # 有嵌套
                在这里使用 外部函数的变量             # 有引用

            return 内部函数名                      # 有返回
    闭包的 三个前提条件:
        1. 有嵌套. 即: 有外部函数, 有内部函数.
        2. 有引用. 即: 在内部函数中, 使用外部函数的变量.
        3. 有返回. 即: 在外部函数中, 返回 内部函数(对象)

"""

# 需求1: 回顾 局部变量的 作用域.
def method():
    a = 10
    # print(a)
    return a

# 需求2: 演示闭包. 定义用于求和的闭包函数, 外部函数有参数num1, 内部函数有参数num2, 然后调用, 求两数之和, 观察效果.
def outer(num1):                        # 外部函数
    def inner(num2):                    # 内部函数, 有嵌套
        # 具体的求和动作.
        sum = num1 + num2               # 有引用, 即: 在内部函数 中 使用外部函数的变量
        print(f'求和结果为: {sum}')
    return inner                        # 有返回, 即: 返回内部函数 对象.


# main函数, 作为入口.
if __name__ == '__main__':
    print(method())     # 10
    # print(a)          # 报错, 函数调用完毕, 局部变量就消失了, 无法继续使用

    print(method() + 1) # 11
    print(method() + 1) # 11
    print(method() + 1) # 11
    print('-' * 20)

    # 演示闭包的调用.
    fn = outer(10)      # fn = outer函数的返回值 = inner这个内部函数对象    这行代码走完, 外部函数就执行结束了.
    print(fn)           # 地址值, <function outer.<locals>.inner at 0x000001A7C9E32CA0>

    fn(1)               # 11
    fn(1)               # 11
    fn(1)               # 11
