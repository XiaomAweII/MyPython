"""
链表 相关概述:
    背景:
        采用顺序表存储数据, 扩容的时候, 必须有连续的, 足够的内存空间, 才会扩容成功, 否则就会: 扩容失败.
        针对于这种情况, 我们可以采用 链表 来存储数据, 扩容的时候: 有地儿就行(可以不用是连续的空间)
    链表解释:
        它是数据结构的一种, 属于 线性结构, 即: 每个节点都只能有1个 前驱节点(可以理解为: 父节点) 和 1个后继节点(可以理解为: 子节点)
        大白话: 链表可以看做是 用一根线 把 节点 给连接起来, 就叫: 链表.
    组成:
        链表是由 节点 组成的, 不同的节点, 构成的链表也不一样.
    分类:
        单向链表:
            节点由 1个元素域(也叫: 数值域) 和 1个链接域(也叫: 地址域)组成, 每个节点的链接域都指向下个节点的地址. 最后1个节点的地址域为: None
        单向循环链表:
            节点由 1个元素域(也叫: 数值域) 和 1个链接域(也叫: 地址域)组成, 每个节点的链接域都指向下个节点的地址. 最后1个节点的地址域为: 第1个节点的地址.
        双向链表:
            节点由 1个元素域(也叫: 数值域) 和 2个链接域(也叫: 地址域)组成.
            每个节点的前链接域 指向 上个节点的地址. 每个节点的后链接域 指向 下个节点的地址.
            第1个节点的 前地址域 和  最后1个节点的 后地址域 为None.
        双向循环链表:
            节点由 1个元素域(也叫: 数值域) 和 2个链接域(也叫: 地址域)组成.
            每个节点的前链接域 指向 上个节点的地址. 每个节点的后链接域 指向 下个节点的地址.
            第1个节点的 前地址域 指向 最后1个节点的地址,  最后1个节点的 后地址域 指向第1个节点的地址.
"""
