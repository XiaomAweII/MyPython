"""
正则表达式 介绍:
    概述:
        全称叫: Regular Expression, 就是 正确的 符合特定规则的 字符串, 就叫: 正则表达式.
    作用:
        可以用来校验, 匹配, 过滤指定的数据.
    使用步骤:
        1. 导包.
            import re
        2. 正则校验.
            result = re.match(pattern=正则规则, str=要校验的字符串, flag=0)     参1: 正则表达式,  参2: 要校验的字符串,  参3: 可选项, 例如: 忽略大小写, 多行模式等...
        3. 获取到匹配的数据.
            result.group()
    正则表达式 涉及到的函数:
        1. 用于做校验的, 替换的.
            match()             从左往右, 逐个字符的匹配, 不会跳过某个字符, 即: 全词匹配.
            search()            从左往右, 依次匹配, 即: 只要某部分满足条件即可.
            compile().sub()     替换
        2. 用于 获取值的 .
            group()
    细节:
        1. 正则表达式不独属于Python语言, 市场上你见过的绝大多数的语言都支持正则, 例如: Python, PHP, Java, Go, JavaScript..  且规则都是一样的.
        2. 我们学正则表达式, 主要学习的是: 正则表达式的规则, 因为正则表达式已经存在很多年了, 你的需求(校验邮箱, 手机号, 身份证号), 网上一搜一大堆.
        3. 关于正则, 要求大家: 能看懂别人写的式子, 且会基于需求简单的修改即可.
    正则表达式 常用规则:
        .           任意的1个字符
        \.          取消.的特殊用法, 就是1个普通的.
        a           代表1个字符a
        [abc]       代表: a,b,c中任意的1个字符
        [^abc]      代表: 除了a,b,c以外的任意1个字符

        [0-9]       代表: 任意的1个整数, 例如: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
        \d          代表: 任意的1个整数, 效果同上.  \d = [0-9]
        \D          代表: 除了整数外的任意1个字符, 即: \D = [^0-9]
        \s
        \S
        \w
        \W

        ^
        $

        ?           数量词, 代表: 前边的内容出现 0次 或者 1次
        *           数量词, 代表: 前边的内容出现 0 ~ n
        +           数量词, 代表: 前边的内容出现 1 ~ n

        {n}
        {n,}
        {n,m}

        |           表示: 或者的意思.
        ()
        \num

        扩展:
            (?P<分组名>)   设置分组
            (?P=分组名)    使用指定的分组
"""
import re

# match()             从左往右, 逐个字符的匹配, 不会跳过某个字符, 即: 全词匹配.
# 案例1: 正则表达式 匹配 字符.
# 正则表达式:  .it 意思是:  第1个字符任意写, 后续两个字符必须是 it
# print(re.match('.it', 'ait'))       # 能匹配, 返回的是: 正则对象.
# print(re.match('.it', 'aait'))      # 不能匹配, 返回的是: None
# print(re.match('.it', 'aitb'))      # 能匹配, 返回的是: 正则对象.

# result = re.match('.it', 'ait')
# result = re.match('.it', 'aait')


# 案例2: 校验字符串是否是 ait, bit, cit, hit, git
# result = re.match('[abchg]it', 'git')

# 案例3: 校验字符串第1个字符: 可以是除了a,b,c外任意1个字符, 后两个字符必须是hm
# result = re.match('[^abc]hm', ' hm')

# 案例4: 校验 数字开头, 任意多个字符结尾.
# [0-9]     代表任意的1个整数.
# .*        代表任意个任意字符
# result = re.match('[0-9].*', 'a1hmit')               # match是从左往右, 从第1个字符开始匹配的, 不能跳.
# result = re.search('[0-9].*', 'a1hmit')  # search是从左往右, 开始匹配的, 从任意字符开始, 只要能匹配即可.

result = re.match('\d.*', '1hmit')       # \d 等价于 [0-9]

# 判断是否匹配到, 匹配到就打印: 匹配到的内容, 没有匹配到就提示.
if result != None:
    print(f'匹配到: {result.group()}')
else:
    print('未匹配到!')
