"""
使用装饰器的时候, 要注意:
    装饰器的 内部函数 格式要和 原函数(要被装饰的函数) 保持一致, 要么都是无参无返回, 要么都是无参有返回, 要么都是有参无返回, 要么都是有参有返回...
"""


# 案例: 演示装饰器 装饰 原函数(无参无返回值)
# 需求: 定义无参无返回值的原函数 get_sum(), 用于计算两个整数和. 在不改变该函数的基础上,  给这个函数添加友好提示. 请用所学, 模拟该知识点.

# 1. 定义装饰器, 细节: 内部函数结构 = 原函数(要被装饰的函数) 结构
def print_info(fn_name):
    """
    自定义的装饰器, 用于装饰: 指定函数的, 计算前, 加1个友好提示.
    :param fn_name: 要被装饰的 原函数名
    :return: 装饰后的 "原函数"
    """
    def inner():                               # 内部函数, 有嵌套
        print('[友好提示] 正在努力计算中!')        # 有 额外功能
        fn_name()                              # 有引用
    return inner                               # 有返回

# 2. 定义 原函数, 即: 要被装饰的函数.  无参无返回值
@print_info
def get_sum():
    a = 10
    b = 20
    sum = a + b
    print(f'求和结果为: {sum}')

# main方法中, 完成测试
if __name__ == '__main__':
    # 3. 正常调用 原函数.
    # get_sum()

    # 4. 装饰器写法1: 变量名 = 装饰器名(原函数名)
    # get_sum = print_info(get_sum)
    # get_sum()

    # 5. 装饰其写法2: 语法糖写法, 即: @装饰器名
    get_sum()